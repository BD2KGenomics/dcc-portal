#!/bin/bash
#
# Copyright 2016(c) The Ontario Institute for Cancer Research. All rights reserved.
#
# Description:
#   Downloads either a specified release verion or the latest snapshot from
#   artifactory, establishes the correct symlinks, clears the varnish cache and
#   restarts the application.
#
# Usage:
#  See usage()

# Enviromental configuation
cache=<fill in!>
domain=dcc.icgc.org
slack=https://hooks.slack.com/services/<fill in!>

usage(){
cat << EOF
usage: $0 options

This script installs the dcc-portal-api from Artifactory, relinks the jar and restarts the daemon.

OPTIONS:
   -h         # Show this message
   -r version # Install release with version (use 'latest' for latest)
   -s version # Install snapshot with version (use 'latest' for latest)
   -p version # Install pr snapshot with version (use 'latest' for latest)
EOF
}

log(){
  echo `date` -  $1 | tee -a $logdir/install.log
}

release=
snapshot=
pr=
while getopts “:hr:s:p:” OPTION
do
  case $OPTION in
         h)
             usage
             exit 1
             ;;
         r)
             [[ $OPTARG = 'latest' ]] && release=1 || release=$OPTARG
             ;;
         s)
             [[ $OPTARG = 'latest' ]] && snapshot=1 || snapshot=$OPTARG
             ;;
         p)
             [[ $OPTARG = 'latest' ]] && pr=1 || pr=$OPTARG
             ;;
         ?)
             usage
             exit
             ;;
     esac
done

if [[ -z $release ]] && [[ -z $snapshot ]] && [[ -z $pr ]]
then
  usage
  exit 1
fi

# Output location
basedir=$(dirname $(readlink -m $(dirname $0i)))
bindir="$basedir/bin"
libdir="$basedir/lib"
logdir="$basedir/logs"

# Maven artifact location
name="dcc-portal-api"
server="http://seqwaremaven.oicr.on.ca/artifactory"
artifact="org/icgc/dcc/$name"

if [[ -n $release ]]
then
  repo="dcc-release"
  path="$server/$repo/$artifact"
  [[ $release = 1 ]] && version=`curl -s "$path/maven-metadata.xml" | grep latest | sed "s/.*<latest>\([^<]*\)<\/latest>.*/\1/"` || version="$release"
  build=$version
fi
if [[ -n $snapshot ]]
then
  repo="dcc-snapshot"
  path="$server/$repo/$artifact"
  [[ $snapshot = 1 ]] && version=`curl -s "$path/maven-metadata.xml" | grep latest | sed "s/.*<latest>\([^<]*\)<\/latest>.*/\1/"` || version="$snapshot"
  build=`curl -s "$path/$version/maven-metadata.xml" | grep '<value>' | head -1 | sed "s/.*<value>\([^<]*\)<\/value>.*/\1/"`
fi
if [[ -n $pr ]]
then
  repo="dcc-pr-snapshot"
  path="$server/$repo/$artifact"
  [[ $pr = 1 ]] && version=`curl -s "$path/maven-metadata.xml" | grep latest | sed "s/.*<latest>\([^<]*\)<\/latest>.*/\1/"` || version="$pr"
  build=`curl -s "$path/$version/maven-metadata.xml" | grep '<value>' | head -1 | sed "s/.*<value>\([^<]*\)<\/value>.*/\1/"`
fi

# Download and install application
jar="$name-$build.jar"
url="$path/$version/$jar"
log "Downloading jar $url..."
wget -q -N $url -P $libdir
rm -f $libdir/$name.jar
ln -s "$jar" "$libdir/$name.jar"

if [[ -n $cache ]]
then
   # Clear cache
   log 'Clearing varnish cache...'
   response=$(curl --write-out %{http_code} --silent --output /dev/null -XBAN "$cache/")
   if [[ $response -ne 200 ]]
   then
     log "Failed to clear cache: $response response code"
   fi
fi

# Restart application
log 'Restarting application...'
$bindir/dcc-portal-api restart > /dev/null

# Notify
commit=$(curl -sg "$server/api/storage/$repo/$artifact/$version/$jar?properties" | python -c 'import sys, json; print json.load(sys.stdin)["properties"]["vcs.revision"][0]')
log 'Sending Slack message...'
message="<!channel>: Deployed portal to https://$domain using: \n* install $*,\n* commit https://github.com/icgc-dcc/dcc-portal/commit/$commit\n* jar $url"
payload='{"text": "'$message'", "channel": "#deployments","username": "'$domain'", "icon_emoji": ":icgc:", "color":"warning"}'
curl -sg -X POST --data-urlencode "payload=$payload" $slack
ubuntu@dcc-portal-dev:~/dcc-portal/bin$